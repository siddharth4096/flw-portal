



// Mobile menu toggle
const menuToggle = document.querySelector(".menu-toggle");
const navLinks = document.querySelector(".nav-links");

menuToggle.addEventListener("click", () => {
  navLinks.classList.toggle("show");
});

// Portal navigation simulation
function navigate(role) {
  alert(`Redirecting to ${role.toUpperCase()} Portal...`);
}

// üîä Voice Assist Popup Controls
function openLangPopup() {
  document.getElementById("langModal").style.display = "flex";
}
function closeLangPopup() {
  document.getElementById("langModal").style.display = "none";
}
function startVoiceAssist() {
  const lang = document.getElementById("language").value;

  if (lang === "en") {
    alert("üé§ Voice Assistance Activated (English)");
  } else if (lang === "hi") {
    alert("üé§ ‡§µ‡•â‡§á‡§∏ ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ (‡§π‡§ø‡§Ç‡§¶‡•Ä)");
  } else if (lang === "as") {
    alert("üé§ ‡¶≠‡ßü‡ßá‡¶∏ ‡¶∏‡¶π‡¶æ‡ßü‡¶§‡¶æ ‡¶Ü‡ß∞‡¶Æ‡ßç‡¶≠ ‡¶π‚Äô‡¶≤ (‡¶Ö‡¶∏‡¶Æ‡ßÄ‡ßü‡¶æ)");
  } else {
    alert("üé§ Please select a language.");
    return;
  }

  closeLangPopup();
}

// Login modal
function toggleLogin() {
  const modal = document.getElementById("loginModal");
  modal.style.display = (modal.style.display === "flex") ? "none" : "flex";
}
window.onclick = function(event) {
  const loginModal = document.getElementById("loginModal");
  const langModal = document.getElementById("langModal");
  if (event.target === loginModal) loginModal.style.display = "none";
  if (event.target === langModal) langModal.style.display = "none";
};

// üåê Offline/Online indicator
async function checkConnection() {
  try {
    const response = await fetch("https://httpbin.org/status/204", { method: 'HEAD', cache: "no-store" });
    if (response.ok) setStatus(true);
    else setStatus(false);
  } catch (error) {
    setStatus(false);
  }
}
function setStatus(isOnline) {
  const statusDiv = document.getElementById("network-status");
  if (isOnline) {
    statusDiv.textContent = "üü¢ Online Mode";
    statusDiv.style.background = "green";
  } else {
    statusDiv.textContent = "üî¥ Offline Mode";
    statusDiv.style.background = "red";
  }
}


window.addEventListener("load", checkConnection);
setInterval(checkConnection, 5000);






// Start Voice Assist after selecting language
function startVoiceAssist() {
  const lang = document.getElementById("language").value;
  speakText(lang);
  closeLangPopup();
}

// üîä Voice Assist Speech
function speakText(lang) {
  let message = "";

  switch (lang) {
    case "hi":
      message = "‡§è‡§Ü‡§à ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§Æ‡§µ‡•á‡§∂‡•Ä ‡§î‡§∞ ‡§≠‡•à‡§Ç‡§∏ ‡§®‡§∏‡•ç‡§≤ ‡§™‡§π‡§ö‡§æ‡§® ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ " +
                "‡§Ø‡§π ‡§ê‡§™ ‡§è‡§Ü‡§à, ‡§ë‡§´‡§º‡§≤‡§æ‡§á‡§®-‡§™‡•ç‡§∞‡§•‡§Æ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§î‡§∞ ‡§¨‡•Ä‡§™‡•Ä‡§è ‡§è‡§ï‡•Ä‡§ï‡§∞‡§£ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§®‡§∏‡•ç‡§≤‡•ã‡§Ç ‡§ï‡•Ä ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§™‡§π‡§ö‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§ " +
                "‡§¨‡§π‡•Å‡§≠‡§æ‡§∑‡•Ä ‡§µ‡•â‡§Ø‡§∏ ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§è‡§´‡§è‡§≤‡§°‡§¨‡•ç‡§≤‡•ç‡§Ø‡•Ç, ‡§™‡§∂‡•Å ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï‡•ã‡§Ç ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§" +
                "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç: ‡§´‡•Ä‡§≤‡•ç‡§° ‡§µ‡§∞‡•ç‡§ï‡§∞, ‡§™‡§∂‡•Å ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä, ‡§Ø‡§æ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ï‡•§" ;
      break;
    case "as":
      message = "‡¶è ‡¶Ü‡¶á ‡¶¨‡ßç‡ß∞‡ßÄ‡¶° ‡¶Ü‡¶á‡¶°‡ßá‡¶£‡ßç‡¶ü‡¶ø‡¶´‡¶æ‡ßü‡¶æ‡ß∞ ‡¶è‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡ßç‡¶Ø‡¶®‡ß∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ‡•§ ‡¶è‡¶á ‡¶è‡¶™ ‡¶ó‡¶æ‡¶á ‡¶Ü‡ß∞‡ßÅ ‡¶Æ‡¶π‡ß∞ ‡¶ú‡¶æ‡¶§ ‡¶ö‡¶ø‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡ß∞‡¶æ‡¶§ ‡¶∏‡¶π‡¶æ‡ßü ‡¶ï‡ß∞‡¶ø‡¶¨‡•§ " +
                "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡ß∞‡¶π ‡¶ï‡ß∞‡¶ø ‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶≠‡ßÇ‡¶Æ‡¶ø‡¶ï‡¶æ ‡¶¨‡¶æ‡¶õ‡¶ï: ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡ß±‡ß∞‡ßç‡¶ï‡¶æ‡ß∞, ‡¶≠‡ßá‡¶ü‡ßá‡ß∞‡¶ø‡¶®‡¶æ‡ß∞‡ßÄ ‡¶Ö‡¶´‡¶ø‡¶∏‡¶æ‡ß∞, ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡•§ " +
                "‡¶Ü‡¶™‡ßÅ‡¶®‡¶ø ‡¶≤‡¶ó‡¶ø‡¶® ‡¶®‡¶ï‡ß∞‡¶æ‡¶ï‡ßà ‡¶°‡ßá‡¶Æ‡ßã ‡¶Æ‡ßã‡¶°‡ßã ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡ß∞‡¶ø‡¶¨ ‡¶™‡¶æ‡ß∞‡ßá‡•§";
      break;
    case "ta":
      message = "‡Æè ‡Æê ‡Æá‡Æ© ‡Æá‡Æ©‡Æ™‡Øç‡Æ™‡Æø‡Æ∞‡Æø‡Æµ‡Øà ‡ÆÖ‡Æü‡Øà‡ÆØ‡Ææ‡Æ≥‡ÆÆ‡Øç ‡Æï‡Ææ‡Æ£‡ØÅ‡ÆÆ‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Ææ‡Æü‡Øç‡Æü‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡Æµ‡Æ∞‡Æµ‡Øá‡Æ±‡Øç‡Æï‡Æø‡Æ±‡Øã‡ÆÆ‡Øç. ‡Æá‡Æ§‡ØÅ ‡Æ™‡Æö‡ØÅ ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æé‡Æ∞‡ØÅ‡ÆÆ‡Øà ‡Æá‡Æ©‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡ÆÖ‡Æü‡Øà‡ÆØ‡Ææ‡Æ≥‡ÆÆ‡Øç ‡Æï‡Ææ‡Æ£ ‡Æâ‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç. " +
                "‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æô‡Øç‡Æï‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç: ‡Æ™‡ØÅ‡Æ≤‡Æ§‡Øç ‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Ææ‡Æ≥‡Æ∞‡Øç, ‡Æï‡Ææ‡Æ≤‡Øç‡Æ®‡Æü‡Øà ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æø. " +
                "‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æâ‡Æ≥‡Øç‡Æ®‡ØÅ‡Æ¥‡Øà‡ÆØ‡Ææ‡ÆÆ‡Æ≤‡Øç ‡Æü‡ØÜ‡ÆÆ‡Øã ‡ÆÆ‡ØÅ‡Æ±‡Øà‡ÆØ‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æ≤‡Ææ‡ÆÆ‡Øç.";
      break;
    default:
      message = "Welcome to the AI-Powered Cattle & Buffalo Breed Recognition System. This app helps in Identify breeds instantly with A I, offline-first support, and BPA integration. " +
                "Designed for FLWs, Vets, and Admins with multilingual voice navigation." +
                "Please choose your role: Field Worker, Veterinary Officer, or Admin. ";
  }

  const utterance = new SpeechSynthesisUtterance(message);

  // Set correct language code for TTS
  switch (lang) {
    case "hi":
      utterance.lang = "hi-IN";
      break;
    case "as":
      utterance.lang = "as-IN"; // Assamese (may fallback if voice not installed)
      break;
    case "ta":
      utterance.lang = "ta-IN";
      break;
    default:
      utterance.lang = "en-US";
  }

  speechSynthesis.speak(utterance);
}





// script.js
window.addEventListener("scroll", () => {
  document.querySelectorAll(".reveal").forEach(el => {
    const rect = el.getBoundingClientRect();
    if (rect.top < window.innerHeight - 50) {
      el.classList.add("active");
    }
  });
});











// Register Service Worker (FLW only)
if ("serviceWorker" in navigator) {
  window.addEventListener("load", () => {
    navigator.serviceWorker
      .register("/sw.js")
      .then(reg => console.log("‚úÖ Service Worker registered for FLW:", reg))
      .catch(err => console.error("‚ùå Service Worker failed:", err));
  });
}
